{"version":3,"sources":["Components/Layout/TaskView/PanelLayout/TaskItem/TaskItem.css","Components/Layout/TaskView/PanelHead/PanelHead.css","App.css","Components/Layout/TaskView/PanelLayout/PendingPanel/Panel.css","Components/Layout/AddControl/AddControl.css","assets/todo-logo.png","Components/Layout/AddControl/AddControl.js","Components/Layout/TaskView/PanelHead/PanelHead.js","Components/Layout/TaskView/PanelLayout/TaskItem/TaskItem.js","Components/Layout/TaskView/PanelLayout/PendingPanel/PendingPanel.js","Components/Layout/TaskView/PanelLayout/CompletedPanel/CompletedPanel.js","HOC/Auxiliary.js","Components/Layout/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","AddControl","state","taskValue","updateValue","event","setState","target","value","sendTaskHandler","props","addTask","className","classes","type","placeholder","Input","this","onChange","onClick","Button","Component","panelHead","pendingPanelClass","PanelTab","activePanelClass","activePanel","push","Active","PanelHead","join","changePanelView","TaskItem","taskItemValue","task","slice","editTask","temp","classList","TaskRow","completed","Strike","panelType","id","taskId","Checkbox","e","preventDefault","taskCompleted","enableEdit","onBlur","disableEdit","htmlFor","deleteTask","pendingPanel","PendingPanel","taskItems","map","taskItem","completedPanel","aux","children","Layout","completedTasks","addTaskHandler","tempTaskArr","Math","floor","random","deleteTaskHandler","taskToDelete","indexToDelete","indexOf","splice","enableEditHandler","taskToEnable","indexToEdit","disableEditHandler","editedTaskVal","taskCompletedHandler","completedTask","tempCompletedArr","setTimeout","blankText","style","textAlign","fontSize","CompletedPanel","length","App","Header","src","Logo","alt","Brand","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f3f7eea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskRow\":\"TaskItem__TaskRow__3w77R\",\"TaskItem\":\"TaskItem__TaskItem__3tk-d\",\"Button\":\"TaskItem__Button__36wm0\",\"Strike\":\"TaskItem__Strike__1Z7dT\",\"strike\":\"TaskItem__strike__3d98q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PanelHead\":\"PanelHead__PanelHead__1Iqda\",\"PanelTab\":\"PanelHead__PanelTab__1xfMh\",\"Active\":\"PanelHead__Active__2Y5Iq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"App__Header__s9xyB\",\"Logo\":\"App__Logo__1trWm\",\"Brand\":\"App__Brand__3zmVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PendingPanel\":\"Panel__PendingPanel__350Xs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddControl\":\"AddControl__AddControl__1-O8q\",\"Input\":\"AddControl__Input__3LKN2\",\"Button\":\"AddControl__Button__17cch\"};","export default __webpack_public_path__ + \"static/media/todo-logo.9a3003da.png\";","import React, { Component } from 'react';\r\nimport classes from './AddControl.css';\r\n\r\nclass AddControl extends Component {\r\n    state = {\r\n        taskValue: \"\"\r\n    }\r\n\r\n    updateValue = (event) => {\r\n        this.setState({ taskValue: event.target.value })\r\n    }\r\n\r\n    sendTaskHandler = () => {\r\n        if (this.state.taskValue) {\r\n            this.props.addTask(this.state.taskValue);\r\n            this.setState({ taskValue: \"\" })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={classes.AddControl}>\r\n                <input type=\"text\" placeholder=\"I need to...\" className={classes.Input} value={this.state.taskValue} onChange={this.updateValue} />\r\n                <button onClick={this.sendTaskHandler} className={classes.Button}>+</button>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddControl;","import React from 'react';\r\nimport classes from './PanelHead.css';\r\n\r\nconst panelHead = (props) => {\r\n    var pendingPanelClass = [classes.PanelTab];\r\n    var activePanelClass = [classes.PanelTab];\r\n    if (props.activePanel === \"pendingPanel\") {\r\n        pendingPanelClass.push(classes.Active);\r\n        activePanelClass = [classes.PanelTab];\r\n    }\r\n    else {\r\n        activePanelClass.push(classes.Active);\r\n        pendingPanelClass = [classes.PanelTab];\r\n    }\r\n    return (\r\n        <div className={classes.PanelHead}>\r\n            <div className={pendingPanelClass.join(\" \")} onClick={() => props.changePanelView('pendingPanel')}>Pending</div>\r\n            <div className={activePanelClass.join(\" \")} onClick={() => props.changePanelView('completedPanel')}>Completed</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default panelHead;","import React, { Component } from 'react';\r\nimport classes from './TaskItem.css';\r\n\r\nclass TaskItem extends Component {\r\n    state = {\r\n        taskItemValue: this.props.task.taskValue.slice(0)  //creating a clone of the prop as we can't directly mutate it\r\n    }\r\n\r\n    editTask = (event) => {\r\n        var temp = event.target.value;\r\n        this.setState({ taskItemValue: temp })\r\n    }\r\n\r\n    render() {\r\n        var classList = [classes.TaskRow];\r\n        if (this.props.task.completed)\r\n            classList.push(classes.Strike)  //assigning strike animation class to the task which is completed\r\n\r\n        return (\r\n            <span className={classList.join(\" \")}>\r\n                {\r\n                    this.props.panelType === \"pendingPanel\" ?\r\n                        <input type=\"checkbox\" id={this.props.task.taskId} className={classes.Checkbox} onClick={(e) => this.props.task.completed ? e.preventDefault() : this.props.taskCompleted(this.props.task)} /> : null\r\n                }\r\n\r\n                {\r\n                    this.props.task.enableEdit ? <input className={classes.TaskItem} value={this.state.taskItemValue} onChange={this.editTask} onBlur={() => this.props.disableEdit(this.state.taskItemValue, this.props.task.taskId)}></input>\r\n                        : <label htmlFor={this.props.task.taskId} className={classes.TaskItem}><p className={classes.TaskItem}>{this.props.task.taskValue}</p></label>\r\n                }\r\n\r\n                {\r\n                    this.props.panelType === \"pendingPanel\" ?\r\n                        <button className={classes.Button} onClick={() => this.props.task.completed ? null : this.props.enableEdit(this.props.task)}><i className=\"fas fa-edit\"></i></button> : null            //we don't need this button in case of completed task pane\r\n                }\r\n                {\r\n                    this.props.panelType === \"pendingPanel\" ?\r\n                        <button className={classes.Button} onClick={() => this.props.task.completed ? null : this.props.deleteTask(this.props.task)}><i className=\"fas fa-trash-alt\"></i></button> : null        //we don't need this button in case of completed task pane\r\n                }\r\n\r\n            </span>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TaskItem;","import React from 'react';\r\nimport classes from './Panel.css';\r\nimport TaskItem from '../TaskItem/TaskItem';\r\n\r\nconst pendingPanel = (props) => {\r\n    return (\r\n        <div className={classes.PendingPanel}>\r\n            <ul>\r\n                {props.taskItems.map(taskItem => {\r\n                    return <li key={taskItem.taskId}><TaskItem task={taskItem} deleteTask={props.deleteTask} enableEdit={props.enableEdit} disableEdit={props.disableEdit} taskCompleted={props.taskCompleted} panelType={props.panelType} /></li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default pendingPanel;","import React from 'react';\r\nimport classes from '../PendingPanel/Panel.css';\r\nimport TaskItem from '../TaskItem/TaskItem';\r\n\r\nconst completedPanel = (props) => {\r\n    return (\r\n        <div className={classes.PendingPanel}>\r\n            <ul>\r\n                {props.taskItems.map(taskItem => {\r\n                    return <li key={taskItem.taskId}><TaskItem task={taskItem} panelType={props.panelType} /></li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default completedPanel;","const aux = (props) => props.children\r\n\r\nexport default aux;","import React, { Component } from 'react';\r\nimport AddControl from '../Layout/AddControl/AddControl';\r\nimport PanelHead from './TaskView/PanelHead/PanelHead';\r\nimport PendingPanel from '../Layout/TaskView/PanelLayout/PendingPanel/PendingPanel';\r\nimport CompletedPanel from '../Layout/TaskView/PanelLayout/CompletedPanel/CompletedPanel';\r\nimport Aux from '../../HOC/Auxiliary';   //Aux as a HOC allows us to group multiple elements inside a section without having to create unnecessay divs\r\n\r\nclass Layout extends Component {\r\n    state = {\r\n        taskItems: [], //list of pending tasks\r\n        completedTasks: [], //list of completed tasks\r\n        activePanel: \"pendingPanel\"\r\n    }\r\n\r\n    addTaskHandler = (task) => {\r\n        var tempTaskArr = [...this.state.taskItems];    //creating a clone of state arr so as to not mutate it directly\r\n        tempTaskArr.push({\r\n            taskId: Math.floor(Math.random() * (999 - 100 + 1) + 100),      //creating a random unique 3 digit ID\r\n            taskValue: task\r\n        })\r\n        this.setState({ taskItems: [...tempTaskArr] })\r\n    }\r\n\r\n    deleteTaskHandler = (taskToDelete) => {\r\n        var tempTaskArr = [...this.state.taskItems];\r\n        var indexToDelete = tempTaskArr.map(task => task.taskId).indexOf(taskToDelete.taskId);  //finding the index of the task from the task list array\r\n        tempTaskArr.splice(indexToDelete, 1);\r\n        this.setState({ taskItems: tempTaskArr })\r\n    }\r\n\r\n    enableEditHandler = (taskToEnable) => {\r\n        var tempTaskArr = [...this.state.taskItems];\r\n        var indexToEdit = tempTaskArr.map(task => task.taskId).indexOf(taskToEnable.taskId);\r\n        tempTaskArr[indexToEdit]['enableEdit'] = true;\r\n        this.setState({ taskItems: [...tempTaskArr] })\r\n    }\r\n\r\n    disableEditHandler = (editedTaskVal, taskId) => {\r\n        var tempTaskArr = [...this.state.taskItems];\r\n        var indexToEdit = tempTaskArr.map(task => task.taskId).indexOf(taskId);\r\n        tempTaskArr[indexToEdit].taskValue = editedTaskVal;\r\n        delete tempTaskArr[indexToEdit].enableEdit;\r\n        this.setState({ taskItems: tempTaskArr });\r\n\r\n    }\r\n\r\n    taskCompletedHandler = (completedTask) => {\r\n        var tempTaskArr = [...this.state.taskItems];\r\n        var indexToEdit = tempTaskArr.map(task => task.taskId).indexOf(completedTask.taskId);\r\n        tempTaskArr[indexToEdit]['completed'] = true;    //setting a completed property which will be used to style the task item\r\n        this.setState({ taskItems: tempTaskArr });\r\n        var tempCompletedArr = [...this.state.completedTasks];\r\n        tempCompletedArr.push(completedTask);\r\n        this.setState({ completedTasks: tempCompletedArr })\r\n        setTimeout(() => {\r\n            this.deleteTaskHandler(completedTask)   //removing the task after a delay, once the scratch animation is finished\r\n        }, 2000)\r\n    }\r\n\r\n    changePanelView = (panelType) => {\r\n        this.setState({ activePanel: panelType })\r\n    }\r\n\r\n    render() {\r\n        const blankText = <p style={{ textAlign: \"center\", fontSize: \"24px\" }}>Nothing to do! Add a task.</p>\r\n        var activePanel = {};\r\n        if (this.state.activePanel === \"pendingPanel\") {\r\n            activePanel = <PendingPanel taskItems={this.state.taskItems} deleteTask={this.deleteTaskHandler} enableEdit={this.enableEditHandler} disableEdit={this.disableEditHandler} taskCompleted={this.taskCompletedHandler} panelType={this.state.activePanel} />\r\n        }\r\n        else {\r\n            activePanel = <CompletedPanel taskItems={this.state.completedTasks} panelType={this.state.activePanel} />\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <AddControl addTask={this.addTaskHandler} />\r\n                {\r\n                    <Aux>\r\n                        {this.state.taskItems.length ? null : blankText}\r\n                        <PanelHead changePanelView={this.changePanelView} activePanel={this.state.activePanel} />\r\n                        {activePanel}\r\n                    </Aux>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout;","import './App.css';\nimport classes from './App.css';\nimport Logo from './assets/todo-logo.png'\nimport Layout from './Components/Layout/Layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className={classes.Header}>\n        <img src={Logo} className={classes.Logo} alt=\"Logo\" />\n        <span className={classes.Brand}>Any.Do</span>\n      </header>\n      <div>\n        <Layout />\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}